input {
  beats {
    port => 5044
  }

  tcp {
    port => 5000
    type => "application"
  }

  http {
    port => 8080
    type => "http"
  }
}

filter {
  if [type] == "application" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:level}(\s+)\[%{DATA:correlationId}\] %{DATA:logger} - %{GREEDYDATA:log_message}" 
      }
    }

    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
    }

    if [log_message] =~ /^\{.*\}$/ {
      json {
        source => "log_message"
        target => "json_data"
      }
    }

    # Extract HTTP request information
    if [log_message] =~ /HTTP/ {
      grok {
        match => { 
          "log_message" => "%{WORD:http_method} %{URIPATH:http_path}(\?%{URIQUERY:http_query})?( %{NUMBER:http_status})?" 
        }
      }
    }

    # Extract performance metrics
    if [log_message] =~ /duration/ {
      grok {
        match => { 
          "log_message" => "duration: %{NUMBER:duration_ms}ms" 
        }
      }
      mutate {
        convert => { "duration_ms" => "integer" }
      }
    }

    # Add custom fields
    mutate {
      add_field => { "service" => "springboot-mongodb-app" }
      add_field => { "environment" => "production" }
    }
  }

  # Kubernetes logs processing
  if [kubernetes] {
    mutate {
      add_field => { "service" => "%{[kubernetes][labels][app]}" }
      add_field => { "namespace" => "%{[kubernetes][namespace]}" }
      add_field => { "pod_name" => "%{[kubernetes][pod][name]}" }
    }
  }

  # MongoDB logs processing
  if [type] == "mongodb" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:severity} %{DATA:component} \[%{DATA:context}\] %{GREEDYDATA:log_message}" 
      }
    }

    date {
      match => [ "timestamp", "yyyy-MM-ddTHH:mm:ss.SSSZ" ]
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "application-logs-%{+YYYY.MM.dd}"

    template_name => "application-logs"
    template => {
      "index_patterns" => ["application-logs-*"]
      "settings" => {
        "number_of_shards" => 2
        "number_of_replicas" => 1
        "refresh_interval" => "5s"
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "level" => { "type" => "keyword" }
          "logger" => { "type" => "keyword" }
          "thread" => { "type" => "keyword" }
          "service" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "correlationId" => { "type" => "keyword" }
          "http_method" => { "type" => "keyword" }
          "http_path" => { "type" => "keyword" }
          "http_status" => { "type" => "integer" }
          "duration_ms" => { "type" => "integer" }
          "log_message" => { "type" => "text" }
        }
      }
    }
  }

  # Output to stdout for debugging (can be removed in production)
  stdout {
    codec => rubydebug
  }
}